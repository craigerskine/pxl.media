---
layout: 'layouts/default.njk'
title: Search results
---

{%- import 'components/heading.njk' as heading %}

<div x-data="app" x-init="gamesFiltered">
  {%- call heading.x(tag='h1') %}<b x-show="results" x-text="total" class="mr-2 text-xs opacity-75"></b> <span x-text="total > 1 ? 'results' : 'result'"></span> for: <i x-text="query" class="ml-1 text-gray-500 font-normal"></i>{%- endcall %}
  <ul x-show="results" class="list-game pb-4 flex-(& wrap)">
    <template x-for="item in gamesFiltered">
      {% include 'components/game_alpine.njk' %}
    </template>
  </ul>
  <h2 x-show="!results && !loading" class="m-auto py-8 px-4 text-(gray-500 3xl center) leading-none font-bold md:(py-32)">
    NO RESULTS
    <small class="pt-5 text-lg block opacity-80 md:(text-2xl)">↑ ↑ ↓ ↓ ← → ← → B A</small>
  </h2>
  <h2 x-show="loading" class="m-auto py-8 px-4 text-(gray-500 3xl) leading-none font-bold flex items-center justify-center gap-4 md:(py-32)">
    LOADING
    <iconify-icon icon="mdi:loading" inline class="iconify text-4xl motion-safe:(animate-spin)"></iconify-icon>
  </h2>
</div>

<script>
  document.addEventListener('alpine:init', () => {
    Alpine.data('app', () => ({
      query: new URLSearchParams(location.search).get('q'),
      games: null,
      loading: true,
      results: false,
      total: 0,
      async gamesFiltered() {
        if (this.games === null) {
          try {
            const response = await fetch('/search/data.json');
            const data = await response.json();
            this.games = data;
          } catch (error) {
            console.error('Error loading JSON data:', error);
          }
        }
        if (this.games) {
          const filterItems = this.games.filter((item) => {
            const qy = this.query.toString().toLowerCase().replace(/[^\w\-]+/g, '') ?? '';
            const tl = item.title.toString().normalize('NFKD').toLowerCase().replace(/[^\w\-]+/g, '') ?? '';
            const nt = item.note.toString().toLowerCase().replace(/[^\w\-]+/g, '') ?? '';
            const arr = [tl, nt];
            return arr.some(rs => rs.includes(qy));
          });
          if (filterItems.length < this.games.length && filterItems.length > 0) {
            this.total = filterItems.length;
            this.results = true;
            this.loading = false;
            return filterItems;
          } else {
            this.results = false;
            this.loading = false;
          }
        }
        return null;
      },
      slugify(text) {
        return text?.toString()
          .toLowerCase()
          .normalize('NFKD')
          .trim()
          .toLowerCase()
          .replace(/[^\w\-]+/g, '-')
          .replace(/\s+/g, '-')
          .replace(/-+/g, '-')
      },
      csv(text) {
        return text?.toString().replace(',', ', ')
      },
    }));
  });
</script>